##########################
Google Apps Authentication
##########################

The Google Apps authority allows you to authenticate users in your Google Apps Domain. Because it is
a limited access system, it is well suited to control access to modules to people in your organization.

Google Apps uses a form of *OpenID*. Instead of authenticating directly to Google, 
the user gets redirected to the Google Apps login page. Then they must authenticate and then 
authorize access to the application. Your application has no access to the user's login or password.

This authority also has the ability through OAuth to access protected data in your google apps domain.
(Only for paid Google Apps for Business or Google Apps for Education accounts).
This allows you to use Kurogo to display your domain's calendars, documents or other protected files
in the mobile browser. This is handled without requiring you to divulge sensitive usernames or passwords.
All access is handled through revokable keys. 

=============
Configuration
=============

To configure authentication, you only need to add a few parameters:

* *USER_LOGIN* - Should be set to *LINK*
* *GOOGLEAPPS_DOMAIN* - should be set to your Google Apps domain (example.com)

.. code-block:: ini

    [googleapps]
    CONTROLLER_CLASS        = "GoogleAppsAuthentication" 
    TITLE                   = "Our Domain"
    USER_LOGIN              = "LINK"
    GOOGLEAPPS_DOMAIN       = "example.com"

------------
How it Works
------------

The Google Apps Authentication system uses OpenID  by redirecting the user to an authentication page
provided by Google. The application sends a series of values including a URL callback with the request. 
Once the request  is complete, the service redirects back to the callback URL and the user is logged in. 
Google requires that the user authorize the ability for the application to view the user's email address. 

=====================
Accessing Domain data
=====================

If you have the need to access Google Apps Data on behalf of the user, then you will need to provide a
consumer key, secret, and scope. These are values that identify the application to Google (and the
user as a result) and identify the types of data you wish to access. If you have no need to access
data, then you do not need to enter these values. You must first `register your application's domain <https://www.google.com/accounts/ManageDomains>`_.
The domain *must* match exactly the fully qualified domain name of the web application's host name. 
OAuth requires the registered domain and the callback URL (which is built using the domain of the kurogo instance) to match exactly.
If you need to have an alternate domain name for development, you will need to register that domain as well.
Once you have completed that process you will have an OAuth consumer key and secret you can use. 
This data will be included in the authentication declaration:

* *OAUTH_CONSUMER_KEY* - Consumer key provided by google
* *OAUTH_CONSUMER_SECRET* - Consumer secret provided by google
* *GOOGLE_SCOPE[]* - A repeatable list of scope URLs that indicate which services you wish to access.
  These are defined by Google and shown at http://code.google.com/apis/gdata/faq.html#AuthScopes. 
  Common examples used by Kurogo include:
  
  * http://www.google.com/calendar/feeds - User calendar data
  * https://apps-apis.google.com/a/feeds/calendar/resource/ - Calendar resources (Google Apps for Business/Edu only)
  * http://www.google.com/m8/feeds - Contacts
  * http://docs.google.com/feeds, http://spreadsheets.google.com/feeds, http://docs.googleusercontent.com - Google docs

.. code-block:: ini

    [googleapps]
    CONTROLLER_CLASS        = "GoogleAppsAuthentication" 
    TITLE                   = "Our Domain"
    USER_LOGIN              = "LINK"
    GOOGLEAPPS_DOMAIN       = "example.com"
    OAUTH_CONSUMER_KEY      = "mobile.example.com"
    OAUTH_CONSUMER_SECRET   = "abcdABCD1234ABCD"  ; provided by google
    GOOGLE_SCOPE[]          = "http://www.google.com/calendar/feeds"
    GOOGLE_SCOPE[]          = "https://apps-apis.google.com/a/feeds/calendar/resource/"
    GOOGLE_SCOPE[]          = "http://www.google.com/m8/feeds"
    GOOGLE_SCOPE[]          = "http://docs.google.com/feeds"
    GOOGLE_SCOPE[]          = "http://spreadsheets.google.com/feeds"
    GOOGLE_SCOPE[]          = "http://docs.googleusercontent.com"

You should only include scopes for data that you plan on accessing. If you have no need to access
data, then you do not need to enter these values.


--------------------------------
The Callback URL and development
--------------------------------

The callback URL is generated by Kurogo based on the domain of server you are connecting to. Google
*requires* that the callback url must be in the same domain (or subdomain) as your Google Apps domain.
This presents a problem during development since many developers will use *localhost* to test their 
applications while coding. The best way to combat this is to edit your *hosts* file that allows you to 
create static DNS->IP mappings. Most unix systems will have this file located at */etc/hosts*. 
You should edit this file by adding a test subdomain entry that maps to 127.0.0.1 (which is localhost). 
For instance:

  127.0.0.1     dev.example.com

Now, instead of testing your site using localhost, you would direct your browser to *dev.example.com* (or
whatever your domain is). You can also include the port if your server is listening on a port other
than 80. Thus when Google redirects back to *dev.example.com* your computer will use the local
ip address of 127.0.0.1. 

